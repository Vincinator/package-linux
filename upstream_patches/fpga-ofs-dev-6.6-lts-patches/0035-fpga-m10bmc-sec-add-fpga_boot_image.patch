From becacf5ddc1ac4ae77a4bd5a9d89cf68c2ca4c39 Mon Sep 17 00:00:00 2001
From: Tianfei zhang <tianfei.zhang@intel.com>
Date: Mon, 9 Aug 2021 09:17:25 +0800
Subject: [PATCH] fpga: m10bmc-sec: add fpga_boot_image
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add the fpga_boot_image sysfs node to indicate which image FPGA was loaded
when the FPGA booted.

Co-developed-by: Tianfei zhang <tianfei.zhang@intel.com>
Signed-off-by: Tianfei zhang <tianfei.zhang@intel.com>
Signed-off-by: Ilpo JÃ¤rvinen <ilpo.jarvinen@linux.intel.com>
---
 .../sysfs-driver-intel-m10-bmc-sec-update     |  8 +++++
 drivers/fpga/intel-m10-bmc-sec-update.c       | 29 ++++++++++++++++++-
 include/linux/mfd/intel-m10-bmc.h             |  4 +++
 3 files changed, 40 insertions(+), 1 deletion(-)

diff --git a/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update b/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update
index e5a300dc0dfc..472225a7a5d4 100644
--- a/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update
+++ b/Documentation/ABI/testing/sysfs-driver-intel-m10-bmc-sec-update
@@ -108,3 +108,11 @@ Description:	Read/Write. A key word from the available_fpga_images file
 		attempt to select an unsupported image or fall-back sequence.
 		Consult your product documentation for supported
 		configurations.
+
+What:           /sys/bus/platform/drivers/intel-m10bmc-sec-update/.../control/fpga_boot_image
+Date:		Nov 2021
+KernelVersion:  5.16
+Contact:	Tianfei zhang <tianfei.zhang@intel.com>
+Description:	Read-only. Reading this file will return the name of image booted
+		from FPGA. The EINVAL error code will be returned if no image booted
+		from FPGA.
diff --git a/drivers/fpga/intel-m10-bmc-sec-update.c b/drivers/fpga/intel-m10-bmc-sec-update.c
index c31d8bdff5eb..24ae852ea4fb 100644
--- a/drivers/fpga/intel-m10-bmc-sec-update.c
+++ b/drivers/fpga/intel-m10-bmc-sec-update.c
@@ -786,6 +786,31 @@ power_on_image_store(struct device *dev,
 }
 static DEVICE_ATTR_RW(power_on_image);
 
+static ssize_t
+fpga_boot_image_show(struct device *dev,
+		     struct device_attribute *attr, char *buf)
+{
+	struct m10bmc_sec *sec = dev_get_drvdata(dev);
+	const struct m10bmc_csr_map *csr_map = sec->m10bmc->info->csr_map;
+	int ret;
+	u32 status;
+	int boot_page;
+
+	ret = m10bmc_sys_read(sec->m10bmc, csr_map->base + M10BMC_PMCI_FPGA_CONF_STS, &status);
+	if (ret)
+		return ret;
+
+	if (!FIELD_GET(PMCI_FPGA_CONFIGED, status))
+		return -EINVAL;
+
+	boot_page = FIELD_GET(PMCI_FPGA_BOOT_PAGE, status);
+	if (boot_page >= FPGA_MAX)
+		return -EINVAL;
+
+	return sysfs_emit(buf, "%s\n", fpga_image_names[boot_page]);
+}
+static DEVICE_ATTR_RO(fpga_boot_image);
+
 static const struct fpga_power_on pmci_power_on_image = {
 	.avail_image_mask = BIT(FPGA_FACTORY) | BIT(FPGA_USER1) | BIT(FPGA_USER2),
 	.set_sequence = pmci_set_power_on_image,
@@ -834,7 +859,8 @@ m10bmc_is_visible(struct kobject *kobj, struct attribute *attr, int n)
 
 	if (!sec->ops->poc &&
 	    (attr == &dev_attr_power_on_image.attr ||
-	     attr == &dev_attr_available_power_on_images.attr))
+	     attr == &dev_attr_available_power_on_images.attr ||
+	     attr == &dev_attr_fpga_boot_image.attr))
 		return 0;
 
 	return attr->mode;
@@ -845,6 +871,7 @@ static struct attribute *m10bmc_control_attrs[] = {
 	&dev_attr_image_load.attr,
 	&dev_attr_power_on_image.attr,
 	&dev_attr_available_power_on_images.attr,
+	&dev_attr_fpga_boot_image.attr,
 	NULL,
 };
 
diff --git a/include/linux/mfd/intel-m10-bmc.h b/include/linux/mfd/intel-m10-bmc.h
index 63093ff8bbd7..73e26a288478 100644
--- a/include/linux/mfd/intel-m10-bmc.h
+++ b/include/linux/mfd/intel-m10-bmc.h
@@ -71,6 +71,10 @@
 #define M10BMC_PKVL_PRELOAD_INTERVAL_US	(100 * 1000)
 #define M10BMC_PKVL_PRELOAD_TIMEOUT_US	(30 * 1000 * 1000)
 
+#define M10BMC_PMCI_FPGA_CONF_STS	0xa0
+#define PMCI_FPGA_BOOT_PAGE		GENMASK(2, 0)
+#define PMCI_FPGA_CONFIGED		BIT(3)
+
 #define M10BMC_PMCI_FPGA_POC		0x0b0
 #define PMCI_FPGA_POC			BIT(0)
 #define PMCI_NIOS_REQ_CLEAR		BIT(1)
