From 7579b25b84f4d1ff6f0aa50ae7061035ca502a69 Mon Sep 17 00:00:00 2001
From: KrishnaSimmadhari <91877513+KrishnaSimmadhari@users.noreply.github.com>
Date: Fri, 9 Dec 2022 09:21:33 +0530
Subject: [PATCH] net: phy: QSFP controller subsystem driver for Intel FPGAs

Qsfp controller driver to include platform and DFL interface driver. DFL driver is used
for the host which accesses the QSFP controller subsystem using the PCIe bus and
the platform driver is used where the subsystem is accessed through the AXI/AXI-Lite bus.

Co-developed-by: Russ Weight <russell.h.weight@intel.com>
Signed-off-by: Russ Weight <russell.h.weight@intel.com>
Co-developed-by: Krishna Kumar S R <simmadhari.ramadass.krishna.kumar@intel.com>
Signed-off-by: Krishna Kumar S R <simmadhari.ramadass.krishna.kumar@intel.com>
---
 .../ABI/testing/sysfs-driver-qsfp-mem         |   8 +
 .../bindings/phy/intel,qsfp-mem.txt           |  16 ++
 drivers/net/phy/Kconfig                       |  24 +-
 drivers/net/phy/Makefile                      |   4 +-
 .../net/phy/{qsfp-mem.c => qsfp-mem-core.c}   | 244 ++++++++++--------
 drivers/net/phy/qsfp-mem-dfl.c                |  80 ++++++
 drivers/net/phy/qsfp-mem-platform.c           | 106 ++++++++
 include/linux/phy/qsfp-mem.h                  |  50 ++++
 8 files changed, 423 insertions(+), 109 deletions(-)
 create mode 100644 Documentation/ABI/testing/sysfs-driver-qsfp-mem
 create mode 100644 Documentation/devicetree/bindings/phy/intel,qsfp-mem.txt
 rename drivers/net/phy/{qsfp-mem.c => qsfp-mem-core.c} (54%)
 create mode 100644 drivers/net/phy/qsfp-mem-dfl.c
 create mode 100644 drivers/net/phy/qsfp-mem-platform.c
 create mode 100644 include/linux/phy/qsfp-mem.h

diff --git a/Documentation/ABI/testing/sysfs-driver-qsfp-mem b/Documentation/ABI/testing/sysfs-driver-qsfp-mem
new file mode 100644
index 000000000000..b0126ce4e6d6
--- /dev/null
+++ b/Documentation/ABI/testing/sysfs-driver-qsfp-mem
@@ -0,0 +1,8 @@
+What:		/sys/bus/.../drivers/qsfp-mem/.../qsfp_connected
+Date:		February 2023
+KernelVersion:  6.3
+Contact:	Russ Weight <russell.h.weight@intel.com>
+Description:	Read only.  Returns the plug-in status of the QSFP module.
+		1 means that the QSFP module is connected to a live network,
+		0 means that it is not.
+		Format: "%u".
diff --git a/Documentation/devicetree/bindings/phy/intel,qsfp-mem.txt b/Documentation/devicetree/bindings/phy/intel,qsfp-mem.txt
new file mode 100644
index 000000000000..4a5161dc5cff
--- /dev/null
+++ b/Documentation/devicetree/bindings/phy/intel,qsfp-mem.txt
@@ -0,0 +1,16 @@
+* Intel QSFP Memory controller subsystem
+
+Required properties:
+- compatible: Should be "intel,qsfp-mem"
+- reg: Address and length of the register set for the device. It contains
+  the information of registers in the same order as described by reg-names
+- reg-names: Should contain the reg names
+
+Example:
+
+		qsfp_eth0: qsfp-eth0 {
+			   compatible = "intel,qsfp-mem";
+			   reg-names = "qsfp-mem-controller";
+			   reg = <0x00000001 0x80112000 0x00001000>,
+			   status = "okay";
+		};
diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index eb79aae0a0f6..0257154b48d0 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -66,12 +66,28 @@ config SFP
 	depends on HWMON || HWMON=n
 	select MDIO_I2C
 
-config QSFP_MEM
-	tristate "Memory based QSFP support"
+config QSFP_MEM_CORE
+	tristate "QSFP Controller subsystem core code" if COMPILE_TEST
 	depends on HWMON || HWMON=n
 	help
-	  Adds support for a QSFP controller that shadows the QSFP module's
-	  memory pages in memory.
+	  The core code for the QSFP Controller subsystem for Intel FPGAs used
+	  by other interafce module drivers for access to the QSFP controller
+	  subsystem registers
+
+config QSFP_MEM
+	tristate "Memory based platform driver for QSFP Controller subsystem in Intel FPGAs"
+	select QSFP_MEM_CORE
+	help
+	  Adds support for a QSFP controller subsystem that shadows the QSFP module's
+	  memory pages in memory
+
+config QSFP_MEM_DFL
+	tristate "DFL bus driver for QSFP Controller subsystem in Intel FPGAs"
+	depends on FPGA_DFL
+	select QSFP_MEM_CORE
+	help
+	  This is a Device Feature List (DFL) bus driver for the
+	  QSFP Controller subsystem in Intel FPGAs.
 
 comment "MII PHY device drivers"
 
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index bd1dce127f4a..4c568ff878cc 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -32,7 +32,9 @@ obj-$(CONFIG_SFP)		+= sfp.o
 sfp-obj-$(CONFIG_SFP)		+= sfp-bus.o
 obj-y				+= $(sfp-obj-y) $(sfp-obj-m)
 
-obj-$(CONFIG_QSFP_MEM)		+= qsfp-mem.o
+obj-$(CONFIG_QSFP_MEM_CORE)	+= qsfp-mem-core.o
+obj-$(CONFIG_QSFP_MEM_DFL)	+= qsfp-mem-dfl.o
+obj-$(CONFIG_QSFP_MEM)		+= qsfp-mem-platform.o
 
 obj-$(CONFIG_ADIN_PHY)		+= adin.o
 obj-$(CONFIG_ADIN1100_PHY)	+= adin1100.o
diff --git a/drivers/net/phy/qsfp-mem.c b/drivers/net/phy/qsfp-mem-core.c
similarity index 54%
rename from drivers/net/phy/qsfp-mem.c
rename to drivers/net/phy/qsfp-mem-core.c
index 8ba3c747a106..fb3422868e48 100644
--- a/drivers/net/phy/qsfp-mem.c
+++ b/drivers/net/phy/qsfp-mem-core.c
@@ -2,11 +2,10 @@
 
 /* Intel(R) Memory based QSFP driver.
  *
- * Copyright (C) 2020 Intel Corporation. All rights reserved.
+ * Copyright (C) 2020,2022 Intel Corporation. All rights reserved.
  */
 
 #include <linux/bitfield.h>
-#include <linux/dfl.h>
 #include <linux/etherdevice.h>
 #include <linux/ethtool.h>
 #include <linux/i2c.h>
@@ -15,6 +14,7 @@
 #include <linux/netdevice.h>
 #include <linux/regmap.h>
 #include <linux/uaccess.h>
+#include <linux/phy/qsfp-mem.h>
 
 #define CONF_OFF	0x20
 #define CONF_RST_MOD	BIT(0)
@@ -29,6 +29,11 @@
 #define DELAY_REG       0x38
 #define DELAY_VALUE       0xffffff
 
+#define I2C_TX_FIFO     0x40
+#define I2C_TX_FIFO_START   BIT(9)
+#define I2C_TX_FIFO_STOP    BIT(8)
+#define I2C_TX_FIFO_WRITE   (0)
+
 #define I2C_CTRL        0x48
 #define I2C_CTRL_EN	BIT(0)
 #define I2C_CTRL_BSP	BIT(1)
@@ -38,12 +43,23 @@
 #define I2C_ISER	0x4c
 #define I2C_ISER_TXRDY	BIT(0)
 #define I2C_ISER_RXRDY	BIT(1)
+
+#define I2C_ISR             0x50
+#define I2C_ISR_NACK_DET    BIT(2)
+#define I2C_ISR_ARBLOST_DET BIT(3)
+#define I2C_ISR_RX_OVER     BIT(4)
+#define I2C_ISR_CLEAR_FLAGS (I2C_ISR_NACK_DET | I2C_ISR_ARBLOST_DET | I2C_ISR_RX_OVER)
+
+#define I2C_STATUS	    0x54
+#define I2C_STATUS_CORE	    BIT(0) /* 0 = idle */
+#define I2C_TX_FIFO_LVL     0x58
+
 #define I2C_SCL_LOW	0x60
-#define COUNT_PERIOD_LOW 0x82
+#define COUNT_PERIOD_LOW 170
 #define I2C_SCL_HIGH	0x64
-#define COUNT_PERIOD_HIGH 0x3c
+#define COUNT_PERIOD_HIGH 80
 #define I2C_SDA_HOLD	0x68
-#define COUNT_PERIOD_HOLD 0x28
+#define COUNT_PERIOD_HOLD 60
 
 #define QSFP_SHADOW_CSRS_BASE_OFF	0x100
 #define QSFP_SHADOW_CSRS_BASE_END	0x3fc
@@ -51,29 +67,11 @@
 #define DELAY_US 1000
 
 #define QSFP_CHECK_TIME 500
+#define QSFP_CHK_RDY_CNT 1000
 
-enum qsfp_init_status {
-	QSFP_INIT_RESET = 0,
-	QSFP_INIT_DONE,
-};
+#define I2C_QFSP_ADDR       0x50
 
-/**
- * struct qsfp - device private data structure
- * @base: base address of the device.
- * @regmap: regmap for device.
- * @dwork: work struct for checking qsfp plugin status.
- * @dev: point to dfl device.
- * @init: qsfp init status.
- * @lock: lock for qsfp initial function and status.
- */
-struct qsfp {
-	void __iomem *base;
-	struct regmap *regmap;
-	struct delayed_work dwork;
-	struct device *dev;
-	enum qsfp_init_status init;
-	struct mutex lock;
-};
+#define I2C_MAX_TIMEOUT     100
 
 /* The QSFP controller defines 64-bit wide registers, but support
  * for 64-bit IO in regmap-mmio was removed in upstream commit
@@ -98,7 +96,7 @@ static void qsfp_init_i2c(struct qsfp *qsfp)
 	writel(COUNT_PERIOD_HOLD, qsfp->base + I2C_SDA_HOLD);
 
 	writel(FIELD_PREP(I2C_CTRL_FIFO, I2C_CTRL_FIFO_NOT_FULL) |
-	       I2C_CTRL_EN | I2C_CTRL_BSP, qsfp->base + I2C_CTRL);
+			I2C_CTRL_EN | I2C_CTRL_BSP, qsfp->base + I2C_CTRL);
 }
 
 static const struct regmap_config mmio_cfg = {
@@ -110,24 +108,88 @@ static const struct regmap_config mmio_cfg = {
 	.max_register = QSFP_SHADOW_CSRS_BASE_END,
 };
 
-static void qsfp_init(struct qsfp *qsfp)
+static int i2c_txcmp(struct qsfp *qsfp)
+{
+	u32 fifo_lvl;
+
+	return readl_poll_timeout(qsfp->base + I2C_TX_FIFO_LVL, fifo_lvl, !fifo_lvl,
+				  10, I2C_MAX_TIMEOUT);
+}
+
+static int i2c_send(struct qsfp *qsfp, int data)
 {
-	writeq(CONF_RST_MOD | CONF_RST_CON | CONF_MOD_SEL,
-	       qsfp->base + CONF_OFF);
+	int ret = i2c_txcmp(qsfp);
+
+	if (ret)
+		return ret;
+
+	writel(data, qsfp->base + I2C_TX_FIFO);
+	return 0;
+}
+
+static int send_qsfp_cmd_page0(struct qsfp *qsfp)
+{
+	int st, ret;
+
+	i2c_send(qsfp, I2C_TX_FIFO_START | (I2C_QFSP_ADDR << 1) | I2C_TX_FIFO_WRITE);
+	i2c_send(qsfp, 0x7f);
+	i2c_send(qsfp, I2C_TX_FIFO_STOP);
+
+	ret = i2c_txcmp(qsfp);
+	if (ret)
+		return ret;
+
+	/* Check status */
+	st = readl(qsfp->base + I2C_ISR);
+	dev_dbg(qsfp->dev, "QSFP I2C ISR = 0x%02X STAT = 0x%x\n", st,
+		readl(qsfp->base + I2C_STATUS));
+	if (st & I2C_ISR_CLEAR_FLAGS) {
+		writel(I2C_ISR_CLEAR_FLAGS, qsfp->base + I2C_ISR);
+		return 1;
+	}
+
+	return 0;
+}
+
+static int qsfp_init(struct qsfp *qsfp)
+{
+	int cnt;
+
+	/* Reset QSFP Module and QSFP Controller	*/
+	writeq(CONF_RST_MOD | CONF_RST_CON | CONF_MOD_SEL, qsfp->base + CONF_OFF);
+
 	udelay(DELAY_US);
+
 	writeq(CONF_MOD_SEL, qsfp->base + CONF_OFF);
-	udelay(DELAY_US);
 
+	/* Initialize Intel FPGA Avalon I2C (Master) Core */
 	qsfp_init_i2c(qsfp);
+	writel(I2C_ISR_CLEAR_FLAGS, qsfp->base + I2C_ISR);
 
-	udelay(DELAY_US);
 	writeq(DELAY_VALUE, qsfp->base + DELAY_REG);
 
+	/* Check QSFP Module Ready */
+	for (cnt = 0; cnt < QSFP_CHK_RDY_CNT; cnt++) {
+		/* try to send a command to change page 0 */
+		if (!send_qsfp_cmd_page0(qsfp)) {
+			dev_info(qsfp->dev, "QSFP module ready after waiting for %dms", cnt);
+			break;
+		}
+
+		udelay(DELAY_US);
+	}
+
+	if (cnt >= QSFP_CHK_RDY_CNT) {
+		dev_err(qsfp->dev, "QSFP I2C check ready timeout error");
+		return -ETIMEDOUT;
+	}
+
+	/* Enable Polling mode */
 	writeq(CONF_POLL_EN | CONF_MOD_SEL, qsfp->base + CONF_OFF);
-	udelay(DELAY_US);
+	return 0;
 }
 
-static int check_qsfp_plugin(struct qsfp *qsfp)
+int check_qsfp_plugin(struct qsfp *qsfp)
 {
 	u64 status;
 
@@ -135,8 +197,37 @@ static int check_qsfp_plugin(struct qsfp *qsfp)
 
 	return (!(status & MODPRSL));
 }
+EXPORT_SYMBOL_GPL(check_qsfp_plugin);
+
+ssize_t qsfp_connected_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct qsfp *qsfp = dev_get_drvdata(dev);
+	u32 plugin;
+
+	mutex_lock(&qsfp->lock);
+	plugin = check_qsfp_plugin(qsfp) && (qsfp->init == QSFP_INIT_DONE);
+	mutex_unlock(&qsfp->lock);
+
+	return sysfs_emit(buf, "%u\n", plugin);
+}
+static DEVICE_ATTR_RO(qsfp_connected);
 
-static void qsfp_check_hotplug(struct work_struct *work)
+static struct attribute *qsfp_mem_attrs[] = {
+	&dev_attr_qsfp_connected.attr,
+	NULL,
+};
+
+static const struct attribute_group qsfp_mem_group = {
+	.attrs = qsfp_mem_attrs,
+};
+
+const struct attribute_group *qsfp_mem_groups[] = {
+	&qsfp_mem_group,
+	NULL,
+};
+EXPORT_SYMBOL_GPL(qsfp_mem_groups);
+
+void qsfp_check_hotplug(struct work_struct *work)
 {
 	struct delayed_work *dwork;
 	struct qsfp *qsfp;
@@ -150,11 +241,10 @@ static void qsfp_check_hotplug(struct work_struct *work)
 	status = readq(qsfp->base + STAT_OFF);
 	dev_dbg(qsfp->dev, "qsfp status 0x%llx\n", status);
 
-	if (check_qsfp_plugin(qsfp) &&
-	    qsfp->init == QSFP_INIT_RESET) {
+	if (check_qsfp_plugin(qsfp) && qsfp->init == QSFP_INIT_RESET) {
 		dev_info(qsfp->dev, "detected QSFP plugin\n");
-		qsfp_init(qsfp);
-		WRITE_ONCE(qsfp->init, QSFP_INIT_DONE);
+		if (!qsfp_init(qsfp))
+			WRITE_ONCE(qsfp->init, QSFP_INIT_DONE);
 	} else if (!check_qsfp_plugin(qsfp) &&
 		   qsfp->init == QSFP_INIT_DONE) {
 		dev_info(qsfp->dev, "detected QSFP unplugin\n");
@@ -165,47 +255,17 @@ static void qsfp_check_hotplug(struct work_struct *work)
 	schedule_delayed_work(&qsfp->dwork, msecs_to_jiffies(QSFP_CHECK_TIME));
 }
 
-static ssize_t qsfp_connected_show(struct device *dev,
-				   struct device_attribute *attr, char *buf)
+int qsfp_init_work(struct qsfp *qsfp)
 {
-	struct qsfp *qsfp = dev_get_drvdata(dev);
-	u32 plugin;
-
-	mutex_lock(&qsfp->lock);
-	plugin = check_qsfp_plugin(qsfp) && (qsfp->init == QSFP_INIT_DONE);
-	mutex_unlock(&qsfp->lock);
-
-	return sysfs_emit(buf, "%u\n", plugin);
+	INIT_DELAYED_WORK(&qsfp->dwork, qsfp_check_hotplug);
+	qsfp_check_hotplug(&qsfp->dwork.work);
+	return 0;
 }
+EXPORT_SYMBOL_GPL(qsfp_init_work);
 
-static DEVICE_ATTR_RO(qsfp_connected);
-
-static struct attribute *qsfp_mem_attrs[] = {
-	&dev_attr_qsfp_connected.attr,
-	NULL,
-};
-ATTRIBUTE_GROUPS(qsfp_mem);
-
-static int qsfp_probe(struct dfl_device *dfl_dev)
+int qsfp_register_regmap(struct qsfp *qsfp)
 {
-	struct device *dev = &dfl_dev->dev;
-	struct qsfp *qsfp;
-
-	qsfp = devm_kzalloc(dev, sizeof(*qsfp), GFP_KERNEL);
-	if (!qsfp)
-		return -ENOMEM;
-
-	qsfp->base = devm_ioremap_resource(dev, &dfl_dev->mmio_res);
-	if (!qsfp->base)
-		return -ENOMEM;
-
-	qsfp->dev = dev;
-	mutex_init(&qsfp->lock);
-
-	dev_set_drvdata(dev, qsfp);
-
-	INIT_DELAYED_WORK(&qsfp->dwork, qsfp_check_hotplug);
-	qsfp_check_hotplug(&qsfp->dwork.work);
+	struct device *dev = qsfp->dev;
 
 	qsfp->regmap = devm_regmap_init_mmio(dev, qsfp->base, &mmio_cfg);
 	if (IS_ERR(qsfp->regmap))
@@ -213,36 +273,12 @@ static int qsfp_probe(struct dfl_device *dfl_dev)
 
 	return PTR_ERR_OR_ZERO(qsfp->regmap);
 }
+EXPORT_SYMBOL_GPL(qsfp_register_regmap);
 
-static void qsfp_remove(struct dfl_device *dfl_dev)
+void qsfp_remove_device(struct qsfp *qsfp)
 {
-	struct device *dev = &dfl_dev->dev;
-	struct qsfp *qsfp = dev_get_drvdata(dev);
-
 	writeq(CONF_MOD_SEL, qsfp->base + CONF_OFF);
-
 	cancel_delayed_work_sync(&qsfp->dwork);
 }
-
-#define FME_FEATURE_ID_QSFP 0x13
-
-static const struct dfl_device_id qsfp_ids[] = {
-	{ FME_ID, FME_FEATURE_ID_QSFP },
-	{ }
-};
-
-static struct dfl_driver qsfp_driver = {
-	.drv = {
-		.name = "qsfp-mem",
-		.dev_groups = qsfp_mem_groups,
-	},
-	.id_table = qsfp_ids,
-	.probe = qsfp_probe,
-	.remove = qsfp_remove,
-};
-
-module_dfl_driver(qsfp_driver);
-MODULE_DEVICE_TABLE(dfl, qsfp_ids);
-MODULE_DESCRIPTION("Intel(R) Memory based QSFP driver");
-MODULE_AUTHOR("Intel Corporation");
-MODULE_LICENSE("GPL v2");
+EXPORT_SYMBOL_GPL(qsfp_remove_device);
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/phy/qsfp-mem-dfl.c b/drivers/net/phy/qsfp-mem-dfl.c
new file mode 100644
index 000000000000..1607213998fa
--- /dev/null
+++ b/drivers/net/phy/qsfp-mem-dfl.c
@@ -0,0 +1,80 @@
+// SPDX-License-Identifier: GPL-2.0
+
+/* Intel(R) Memory based QSFP driver For DFL based devices.
+ *
+ * Copyright (C) 2022 Intel Corporation. All rights reserved.
+ */
+#include <linux/dfl.h>
+#include <linux/module.h>
+#include <linux/phy/qsfp-mem.h>
+
+static int qsfp_dfl_probe(struct dfl_device *dfl_dev)
+{
+	struct device *dev = &dfl_dev->dev;
+	struct qsfp *qsfp;
+	int ret;
+
+	qsfp = devm_kzalloc(dev, sizeof(*qsfp), GFP_KERNEL);
+	if (!qsfp)
+		return -ENOMEM;
+
+	qsfp->base = devm_ioremap_resource(dev, &dfl_dev->mmio_res);
+	if (!qsfp->base)
+		return -ENOMEM;
+
+	qsfp->dev = dev;
+	mutex_init(&qsfp->lock);
+
+	dev_set_drvdata(dev, qsfp);
+
+	ret = qsfp_init_work(qsfp);
+	if (ret) {
+		dev_err_probe(dev, ret,
+			      "Failed to initialize delayed work to read QSFP\n");
+		goto exit;
+	}
+
+	ret = qsfp_register_regmap(qsfp);
+	if (ret)
+		goto cancel_work;
+
+	return 0;
+
+cancel_work:
+	qsfp_remove_device(qsfp);
+exit:
+	mutex_destroy(&qsfp->lock);
+	return ret;
+}
+
+static void qsfp_dfl_remove(struct dfl_device *dfl_dev)
+{
+	struct device *dev = &dfl_dev->dev;
+	struct qsfp *qsfp = dev_get_drvdata(dev);
+
+	qsfp_remove_device(qsfp);
+	mutex_destroy(&qsfp->lock);
+}
+
+#define FME_FEATURE_ID_QSFP 0x13
+
+static const struct dfl_device_id qsfp_ids[] = {
+	{ FME_ID, FME_FEATURE_ID_QSFP },
+	{ }
+};
+
+static struct dfl_driver qsfp_driver = {
+	.drv = {
+		.name = "qsfp-mem",
+		.dev_groups = qsfp_mem_groups,
+	},
+	.id_table = qsfp_ids,
+	.probe = qsfp_dfl_probe,
+	.remove = qsfp_dfl_remove,
+};
+
+module_dfl_driver(qsfp_driver);
+MODULE_DEVICE_TABLE(dfl, qsfp_ids);
+MODULE_DESCRIPTION("Intel(R) Memory based QSFP DFL driver");
+MODULE_AUTHOR("Intel Corporation");
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/phy/qsfp-mem-platform.c b/drivers/net/phy/qsfp-mem-platform.c
new file mode 100644
index 000000000000..82ad58f866bc
--- /dev/null
+++ b/drivers/net/phy/qsfp-mem-platform.c
@@ -0,0 +1,106 @@
+// SPDX-License-Identifier: GPL-2.0
+
+/* Intel(R) Memory based QSFP driver for platform devices.
+ *
+ * Copyright (C) 2022 Intel Corporation. All rights reserved.
+ */
+
+#include <linux/bitfield.h>
+#include <linux/module.h>
+#include <linux/of_address.h>
+#include <linux/of_device.h>
+#include <linux/phy/qsfp-mem.h>
+#include <linux/processor.h>
+#include <linux/slab.h>
+
+#define INTEL_QSFP_MEM_CONTROLLER_NAME "qsfp-mem-ctrl"
+
+static int qsfp_platform_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct resource *region = NULL;
+	struct resource *qsfpconfig = NULL;
+	struct qsfp *qsfp = NULL;
+	int ret;
+
+	qsfp = devm_kzalloc(dev, sizeof(*qsfp), GFP_KERNEL);
+	if (!qsfp)
+		return -ENOMEM;
+
+	qsfp->dev = dev;
+	mutex_init(&qsfp->lock);
+	platform_set_drvdata(pdev, qsfp);
+
+	/* QSFP Mem address space */
+	qsfpconfig = platform_get_resource_byname(pdev, IORESOURCE_MEM,
+						  INTEL_QSFP_MEM_CONTROLLER_NAME);
+	if (!qsfpconfig) {
+		dev_err(dev, "resource %s not defined\n", INTEL_QSFP_MEM_CONTROLLER_NAME);
+		return -ENODEV;
+	}
+
+	region = devm_request_mem_region(dev, qsfpconfig->start,
+					 resource_size(qsfpconfig), dev_name(dev));
+	if (!region) {
+		dev_err(dev, "unable to request %s\n", INTEL_QSFP_MEM_CONTROLLER_NAME);
+		return -EBUSY;
+	}
+	qsfp->base = devm_ioremap(dev, region->start, resource_size(region));
+	if (!(qsfp->base)) {
+		dev_err(dev, "ioremap of %s failed!", INTEL_QSFP_MEM_CONTROLLER_NAME);
+		return -ENOMEM;
+	}
+
+	ret = qsfp_init_work(qsfp);
+	if (ret) {
+		dev_err_probe(dev, ret,
+			      "Failed to initialize delayed work to read QSFP\n");
+		goto exit;
+	}
+
+	ret = qsfp_register_regmap(qsfp);
+	if (ret)
+		goto cancel_work;
+
+	return 0;
+
+cancel_work:
+	qsfp_remove_device(qsfp);
+exit:
+	mutex_destroy(&qsfp->lock);
+	return ret;
+}
+
+static int qsfp_platform_remove(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	struct qsfp *qsfp = dev_get_drvdata(dev);
+
+	qsfp_remove_device(qsfp);
+	mutex_destroy(&qsfp->lock);
+	return 0;
+}
+
+static const struct of_device_id intel_fpga_qsfp_mem_ids[] = {
+	{ .compatible = "intel,qsfp-mem", .data = NULL, },
+	{},
+};
+MODULE_DEVICE_TABLE(of, intel_fpga_qsfp_mem_ids);
+
+static struct platform_driver qsfp_driver = {
+	.probe      = qsfp_platform_probe,
+	.remove     = qsfp_platform_remove,
+	.suspend    = NULL,
+	.resume     = NULL,
+	.driver     = {
+		.name   = "qsfp-mem",
+		.dev_groups = qsfp_mem_groups,
+		.owner  = THIS_MODULE,
+		.of_match_table = intel_fpga_qsfp_mem_ids,
+	},
+};
+
+module_platform_driver(qsfp_driver);
+MODULE_DESCRIPTION("Intel(R) Memory based QSFP Platform driver");
+MODULE_AUTHOR("Intel Corporation");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/phy/qsfp-mem.h b/include/linux/phy/qsfp-mem.h
new file mode 100644
index 000000000000..aece97c081f3
--- /dev/null
+++ b/include/linux/phy/qsfp-mem.h
@@ -0,0 +1,50 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/* Intel(R) Memory based core QSFP driver header.
+ *
+ * Copyright (C) 2022 Intel Corporation. All rights reserved.
+ */
+
+#ifndef __LINUX_QSFP_MEM_H
+#define __LINUX_QSFP_MEM_H
+
+#include <linux/bitfield.h>
+#include <linux/etherdevice.h>
+#include <linux/ethtool.h>
+#include <linux/i2c.h>
+#include <linux/io-64-nonatomic-lo-hi.h>
+#include <linux/module.h>
+#include <linux/netdevice.h>
+#include <linux/regmap.h>
+#include <linux/uaccess.h>
+
+enum qsfp_init_status {
+	QSFP_INIT_RESET = 0,
+	QSFP_INIT_DONE,
+};
+
+/**
+ * struct qsfp - device private data structure
+ * @base: base address of the device.
+ * @regmap: regmap for device.
+ * @dwork: work struct for checking qsfp plugin status.
+ * @dev: point to device.
+ * @init: qsfp init status.
+ * @lock: lock for qsfp initial function and status.
+ */
+struct qsfp {
+	void __iomem *base;
+	struct regmap *regmap;
+	struct delayed_work dwork;
+	struct device *dev;
+	enum qsfp_init_status init;
+	struct mutex lock;
+};
+
+int qsfp_init_work(struct qsfp *qsfp);
+int qsfp_register_regmap(struct qsfp *qsfp);
+void qsfp_remove_device(struct qsfp *qsfp);
+int check_qsfp_plugin(struct qsfp *qsfp);
+extern const struct attribute_group *qsfp_mem_groups[];
+
+#endif //__LINUX_QSFP_MEM_H
