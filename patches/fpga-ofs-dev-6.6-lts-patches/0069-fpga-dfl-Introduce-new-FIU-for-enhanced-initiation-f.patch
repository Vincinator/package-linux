From 03fef4875c8093c9c5ecb71250d225ea4fc180bd Mon Sep 17 00:00:00 2001
From: Basheer Ahmed Muddebihal <basheer.ahmed.muddebihal@linux.intel.com>
Date: Wed, 19 Apr 2023 12:37:11 -0700
Subject: [PATCH] fpga: dfl: Introduce new FIU for enhanced initiation
 flexibility

The current initiation of the Device Feature List (DFL) is limited to
FME FIU or PORT FIU. To improve flexibility, a new FPGA Interface Unit
(FIU) has been added. This FIU initiates the DFL with any Feature
serving as the Start Node in the list.

Signed-off-by: Basheer Ahmed Muddebihal <basheer.ahmed.muddebihal@linux.intel.com>
---
 drivers/fpga/Kconfig              |  10 +++
 drivers/fpga/Makefile             |   3 +
 drivers/fpga/dfl-priv-feat-main.c | 120 ++++++++++++++++++++++++++++++
 drivers/fpga/dfl-priv-feat.h      |  27 +++++++
 drivers/fpga/dfl.c                |  29 +++++++-
 drivers/fpga/dfl.h                |   3 +
 include/linux/dfl.h               |   1 +
 7 files changed, 192 insertions(+), 1 deletion(-)
 create mode 100644 drivers/fpga/dfl-priv-feat-main.c
 create mode 100644 drivers/fpga/dfl-priv-feat.h

diff --git a/drivers/fpga/Kconfig b/drivers/fpga/Kconfig
index ee3ffedf5503..f6b9499225e9 100644
--- a/drivers/fpga/Kconfig
+++ b/drivers/fpga/Kconfig
@@ -199,6 +199,16 @@ config FPGA_DFL_AFU
 	  to the FPGA infrastructure via a Port. There may be more than one
 	  Port/AFU per DFL based FPGA device.
 
+config FPGA_DFL_PRIV_FEAT
+	tristate "FPGA DFL PRIV FEAT Driver"
+	depends on FPGA_DFL
+	help
+	  This is the driver for FPGA Private Features which will implement
+	  FIU feature start.
+
+	  To compile this driver as a module, choose M here: the module will
+	  be called dfl_priv_feat.
+
 config FPGA_DFL_NIOS_INTEL_PAC_N3000
 	tristate "FPGA DFL NIOS Driver for Intel PAC N3000"
 	depends on FPGA_DFL
diff --git a/drivers/fpga/Makefile b/drivers/fpga/Makefile
index 664ac7f6ca47..69e3b12f9c8d 100644
--- a/drivers/fpga/Makefile
+++ b/drivers/fpga/Makefile
@@ -41,6 +41,7 @@ obj-$(CONFIG_OF_FPGA_REGION)		+= of-fpga-region.o
 # FPGA Device Feature List Support
 obj-$(CONFIG_FPGA_DFL)			+= dfl.o
 obj-$(CONFIG_FPGA_DFL_FME)		+= dfl-fme.o
+obj-$(CONFIG_FPGA_DFL_PRIV_FEAT)	+= dfl-priv-feat.o
 obj-$(CONFIG_FPGA_DFL_FME_MGR)		+= dfl-fme-mgr.o
 obj-$(CONFIG_FPGA_DFL_FME_BRIDGE)	+= dfl-fme-br.o
 obj-$(CONFIG_FPGA_DFL_FME_REGION)	+= dfl-fme-region.o
@@ -51,6 +52,8 @@ dfl-fme-objs += dfl-fme-perf.o
 dfl-afu-objs := dfl-afu-main.o dfl-afu-region.o dfl-afu-dma-region.o
 dfl-afu-objs += dfl-afu-error.o
 
+dfl-priv-feat-objs :=  dfl-priv-feat-main.o
+
 obj-$(CONFIG_FPGA_DFL_NIOS_INTEL_PAC_N3000)	+= dfl-n3000-nios.o
 
 # Drivers for FPGAs which implement DFL
diff --git a/drivers/fpga/dfl-priv-feat-main.c b/drivers/fpga/dfl-priv-feat-main.c
new file mode 100644
index 000000000000..25ee7e34a022
--- /dev/null
+++ b/drivers/fpga/dfl-priv-feat-main.c
@@ -0,0 +1,120 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Driver for FPGA Private Features
+ *
+ * Copyright (C) 2023 Intel Corp.
+ *
+ * Authors:
+ *   Basheer Ahmed Muddebihal <basheer.ahmed.muddebihal@linux.intel.com>
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+
+#include "dfl.h"
+#include "dfl-priv-feat.h"
+
+static ssize_t
+guid_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct dfl_device *ddev = to_dfl_dev(dev);
+
+	if (!ddev->dfh_version)
+		return -ENOENT;
+
+	return sysfs_emit(buf, "%pUL\n", &ddev->guid);
+}
+static DEVICE_ATTR_RO(guid);
+
+static struct attribute *dfl_priv_feat_attrs[] = {
+	&dev_attr_guid.attr,
+	NULL,
+};
+
+static const struct attribute_group dfl_priv_feat_group = {
+	.attrs = dfl_priv_feat_attrs,
+};
+
+static struct dfl_feature_driver dfl_priv_feat_drvs[] = {
+	{
+		.id_table = NULL,
+		.ops = NULL,
+	},
+};
+
+static int dfl_priv_feat_dev_init(struct platform_device *pdev)
+{
+	struct dfl_feature_platform_data *pdata = dev_get_platdata(&pdev->dev);
+	struct dfl_feature_dev_data *fdata = pdata->fdata;
+	struct dfl_priv_feat *pfeat;
+
+	pfeat = devm_kzalloc(&pdev->dev, sizeof(*pfeat), GFP_KERNEL);
+	if (!pfeat)
+		return -ENOMEM;
+
+	pfeat->pdata = pdata;
+
+	mutex_lock(&fdata->lock);
+	dfl_fpga_fdata_set_private(fdata, pfeat);
+	mutex_unlock(&fdata->lock);
+
+	return 0;
+}
+
+static void dfl_priv_feat_dev_destroy(struct platform_device *pdev)
+{
+	struct dfl_feature_platform_data *pdata = dev_get_platdata(&pdev->dev);
+	struct dfl_feature_dev_data *fdata = pdata->fdata;
+
+	mutex_lock(&fdata->lock);
+	dfl_fpga_fdata_set_private(fdata, NULL);
+	mutex_unlock(&fdata->lock);
+}
+
+static int dfl_priv_feat_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	ret = dfl_priv_feat_dev_init(pdev);
+	if (ret)
+		goto exit;
+
+	ret = dfl_fpga_dev_feature_init(pdev, dfl_priv_feat_drvs);
+	if (ret)
+		goto dev_destroy;
+
+	return 0;
+
+dev_destroy:
+	dfl_priv_feat_dev_destroy(pdev);
+exit:
+	return ret;
+}
+
+static int dfl_priv_feat_remove(struct platform_device *pdev)
+{
+	dfl_fpga_dev_feature_uinit(pdev);
+	dfl_priv_feat_dev_destroy(pdev);
+
+	return 0;
+}
+
+static const struct attribute_group *dfl_priv_feat_dev_groups[] = {
+	&dfl_priv_feat_group,
+	NULL
+};
+
+static struct platform_driver dfl_priv_feat_driver = {
+	.driver	= {
+		.name       = DFL_FPGA_FEATURE_DEV_PRIV_FEAT,
+		.dev_groups = dfl_priv_feat_dev_groups,
+	},
+	.probe   = dfl_priv_feat_probe,
+	.remove  = dfl_priv_feat_remove,
+};
+
+module_platform_driver(dfl_priv_feat_driver);
+
+MODULE_DESCRIPTION("FPGA Privare Feature driver");
+MODULE_AUTHOR("Intel Corporation");
+MODULE_LICENSE("GPL");
diff --git a/drivers/fpga/dfl-priv-feat.h b/drivers/fpga/dfl-priv-feat.h
new file mode 100644
index 000000000000..6dc665e5dd15
--- /dev/null
+++ b/drivers/fpga/dfl-priv-feat.h
@@ -0,0 +1,27 @@
+/* SPDX-License-Identifier: GPL-2.0-only */
+/*
+ * Header file for FPGA Feature Driver
+ *
+ * Copyright (C) 2023 Intel Corp.
+ *
+ */
+
+#ifndef __DFL_PRIV_FEAT_H
+#define __DFL_PRIV_FEAT_H
+
+/**
+ * struct dfl_priv_feat - dfl feature private data
+ *
+ * @mgr: FPGA Feature platform device.
+ * @region_list: linked list of FME's FPGA regions.
+ * @bridge_list: linked list of FME's FPGA bridges.
+ * @pdata: feature platform device's pdata.
+ */
+struct dfl_priv_feat {
+	struct platform_device *mgr;
+	struct list_head region_list;
+	struct list_head bridge_list;
+	struct dfl_feature_platform_data *pdata;
+};
+
+#endif /* __DFL_PRIV_FEAT_H */
diff --git a/drivers/fpga/dfl.c b/drivers/fpga/dfl.c
index 3a27bdeeff17..5ce4c6c16ede 100644
--- a/drivers/fpga/dfl.c
+++ b/drivers/fpga/dfl.c
@@ -35,6 +35,7 @@ static DEFINE_MUTEX(dfl_id_mutex);
 enum dfl_fpga_devt_type {
 	DFL_FPGA_DEVT_FME,
 	DFL_FPGA_DEVT_PORT,
+	DFL_FPGA_DEVT_PRIV_FEAT,
 	DFL_FPGA_DEVT_MAX,
 };
 
@@ -43,6 +44,7 @@ static struct lock_class_key dfl_pdata_keys[DFL_ID_MAX];
 static const char *dfl_pdata_key_strings[DFL_ID_MAX] = {
 	"dfl-fme-pdata",
 	"dfl-port-pdata",
+	"dfl-priv-feat-pdata"
 };
 
 /**
@@ -65,6 +67,8 @@ static struct dfl_dev_info dfl_devs[] = {
 	 .devt_type = DFL_FPGA_DEVT_FME},
 	{.name = DFL_FPGA_FEATURE_DEV_PORT, .dfh_id = DFH_ID_FIU_PORT,
 	 .devt_type = DFL_FPGA_DEVT_PORT},
+	{.name = DFL_FPGA_FEATURE_DEV_PRIV_FEAT, .dfh_id = DFH_ID_FIU_PRIV_FEAT,
+	 .devt_type = DFL_FPGA_DEVT_PORT},
 };
 
 /**
@@ -81,6 +85,7 @@ struct dfl_chardev_info {
 static struct dfl_chardev_info dfl_chrdevs[] = {
 	{.name = DFL_FPGA_FEATURE_DEV_FME},
 	{.name = DFL_FPGA_FEATURE_DEV_PORT},
+	{.name = DFL_FPGA_FEATURE_DEV_PRIV_FEAT},
 };
 
 static void dfl_ids_init(void)
@@ -779,6 +784,15 @@ static void dfl_fpga_cdev_add_port_data(struct dfl_fpga_cdev *cdev,
 	mutex_unlock(&cdev->lock);
 }
 
+static void dfl_fpga_cdev_add_priv_feat_data(struct dfl_fpga_cdev *cdev,
+					     struct dfl_feature_dev_data *fdata)
+
+{
+	mutex_lock(&cdev->lock);
+	list_add(&fdata->node, &cdev->priv_feat_dev_list);
+	mutex_unlock(&cdev->lock);
+}
+
 static struct dfl_feature_dev_data *
 binfo_create_feature_dev_data(struct build_feature_devs_info *binfo)
 {
@@ -967,6 +981,8 @@ static int build_info_commit_dev(struct build_feature_devs_info *binfo)
 
 	if (binfo->type == PORT_ID)
 		dfl_fpga_cdev_add_port_data(binfo->cdev, fdata);
+	else if (binfo->type == PRIV_FEAT_ID)
+		dfl_fpga_cdev_add_priv_feat_data(binfo->cdev, fdata);
 	else
 		binfo->cdev->fme_dev = get_device(&fdata->dev->dev);
 
@@ -1448,12 +1464,21 @@ static int parse_feature_fiu(struct build_feature_devs_info *binfo,
 static int parse_feature_private(struct build_feature_devs_info *binfo,
 				 resource_size_t ofst)
 {
-	if (!is_feature_dev_detected(binfo)) {
+	u8 dfh_ver;
+	u64 v;
+
+	v = readq(binfo->ioaddr + DFH);
+	dfh_ver = FIELD_GET(DFH_VERSION, v);
+
+	if (dfh_ver == 0 && !is_feature_dev_detected(binfo)) {
 		dev_err(binfo->dev, "the private feature 0x%x does not belong to any AFU.\n",
 			feature_id(readq(binfo->ioaddr + ofst)));
 		return -EINVAL;
 	}
 
+	if (dfh_ver == 1)
+		binfo->type = PRIV_FEAT_ID;
+
 	return create_feature_instance(binfo, ofst, 0, 0);
 }
 
@@ -1687,6 +1712,8 @@ dfl_fpga_feature_devs_enumerate(struct dfl_fpga_enum_info *info)
 	mutex_init(&cdev->lock);
 	INIT_LIST_HEAD(&cdev->port_dev_list);
 
+	INIT_LIST_HEAD(&cdev->priv_feat_dev_list);
+
 	cdev->region = fpga_region_register(info->dev, NULL, NULL);
 	if (IS_ERR(cdev->region)) {
 		ret = PTR_ERR(cdev->region);
diff --git a/drivers/fpga/dfl.h b/drivers/fpga/dfl.h
index f79ba69f170b..ac6ed3b410fd 100644
--- a/drivers/fpga/dfl.h
+++ b/drivers/fpga/dfl.h
@@ -72,6 +72,7 @@
 #define DFH_ID			GENMASK_ULL(11, 0)	/* Feature ID */
 #define DFH_ID_FIU_FME		0
 #define DFH_ID_FIU_PORT		1
+#define DFH_ID_FIU_PRIV_FEAT	2
 #define DFH_REVISION		GENMASK_ULL(15, 12)	/* Feature revision */
 #define DFH_NEXT_HDR_OFST	GENMASK_ULL(39, 16)	/* Offset to next DFH */
 #define DFH_EOL			BIT_ULL(40)		/* End of list */
@@ -416,6 +417,7 @@ struct dfl_feature_ops {
 
 #define DFL_FPGA_FEATURE_DEV_FME		"dfl-fme"
 #define DFL_FPGA_FEATURE_DEV_PORT		"dfl-port"
+#define DFL_FPGA_FEATURE_DEV_PRIV_FEAT		"dfl-priv-feat"
 
 void dfl_fpga_dev_feature_uinit(struct platform_device *pdev);
 int dfl_fpga_dev_feature_init(struct platform_device *pdev,
@@ -579,6 +581,7 @@ struct dfl_fpga_cdev {
 	struct device *fme_dev;
 	struct mutex lock;
 	struct list_head port_dev_list;
+	struct list_head priv_feat_dev_list;
 	int released_port_num;
 };
 
diff --git a/include/linux/dfl.h b/include/linux/dfl.h
index f230befc9efe..6d66aa4ad302 100644
--- a/include/linux/dfl.h
+++ b/include/linux/dfl.h
@@ -17,6 +17,7 @@
 enum dfl_id_type {
 	FME_ID = 0,
 	PORT_ID = 1,
+	PRIV_FEAT_ID = 2,
 	DFL_ID_MAX,
 };
 
