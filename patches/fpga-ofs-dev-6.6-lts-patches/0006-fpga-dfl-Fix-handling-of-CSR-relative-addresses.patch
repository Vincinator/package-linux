From d74bd99804353826829b89feff5ece6060778bec Mon Sep 17 00:00:00 2001
From: Basheer Ahmed Muddebihal <basheer.ahmed.muddebihal@linux.intel.com>
Date: Fri, 16 Jun 2023 13:35:30 -0700
Subject: [PATCH] fpga: dfl: Fix handling of CSR-relative addresses

To accommodate both negative and positive offsets in CSR-relative
addresses, the addr_off value has been typecasted to int64_t for
signed representation, ensuring proper support for negative offsets.

The CSR ADDR register value is stored in bits 63:1 of CSR_ADDR [63:1],
along with CSR_ADDR_REL_N [0]. When calculating the address/offset
value, the CSR_ADDR_REL_N bit should be masked to ensure 16-bit address
alignment.

Fixes the address value shift by restoring the shift from FIELD_GET as
addr_off << 1, aligning with the intent specified in the DFHv1
specification. This adjustment ensures that the calculated csr_address
matches the desired behavior of *csr_addr_register & ~1, similar to how
PCIe BARs handle address alignment.

Signed-off-by: Basheer Ahmed Muddebihal <basheer.ahmed.muddebihal@linux.intel.com>
---
 Documentation/fpga/dfl.rst | 16 +++++++++++++---
 drivers/fpga/dfl.c         |  7 ++++---
 2 files changed, 17 insertions(+), 6 deletions(-)

diff --git a/Documentation/fpga/dfl.rst b/Documentation/fpga/dfl.rst
index 80255e2dc3e6..fb1c72006b1d 100644
--- a/Documentation/fpga/dfl.rst
+++ b/Documentation/fpga/dfl.rst
@@ -170,9 +170,19 @@ The format of Version 1 of the Device Feature Header (DFH) is shown below::
 
 - Offset 0x18
 
-  * Reg Address/Offset - If Rel bit is set, then the value is the high 63 bits
-    of a 16-bit aligned absolute address of the feature's registers. Otherwise
-    the value is the offset from the start of the DFH of the feature's registers.
+  * CSR_ADDR[63:1]: the value is the high 63 bits of a 16-bit aligned
+  address/offset of the feature's registers.
+
+  * CSR_ADDR_REL_N [0]: This bit controls whether the address is an absolute
+  address or a relative offset.
+  When CSR_ADDR_REL_N is set to 1, it indicates that the address is an unsigned
+  absolute address. In this case, the 64-bit value of the register is read, and
+  bit 0 is masked (set to 0).
+  When CSR_ADDR_REL_N is set to 0, it signifies that the offset is a signed relative
+  offset from the DFH start. Again, the 64-bit value of the register is read,
+  and bit 0 is masked.
+  In both cases, the purpose of masking bit 0 is to ensure that the resulting address
+  or offset is aligned.
 
 - Offset 0x20
 
diff --git a/drivers/fpga/dfl.c b/drivers/fpga/dfl.c
index db8141b68f79..75580ba0419f 100644
--- a/drivers/fpga/dfl.c
+++ b/drivers/fpga/dfl.c
@@ -1178,11 +1178,12 @@ create_feature_instance(struct build_feature_devs_info *binfo,
 	finfo->dfh_version = dfh_ver;
 	if (dfh_ver == 1) {
 		v = readq(binfo->ioaddr + ofst + DFHv1_CSR_ADDR);
-		addr_off = FIELD_GET(DFHv1_CSR_ADDR_MASK, v);
+		addr_off = FIELD_GET(DFHv1_CSR_ADDR_MASK, v) << 1;
+
 		if (FIELD_GET(DFHv1_CSR_ADDR_REL, v))
-			start = addr_off << 1;
+			start = addr_off;
 		else
-			start = binfo->start + ofst + addr_off;
+			start = binfo->start + ofst + (int64_t)addr_off;
 
 		v = readq(binfo->ioaddr + ofst + DFHv1_CSR_SIZE_GRP);
 		end = start + FIELD_GET(DFHv1_CSR_SIZE_GRP_SIZE, v) - 1;
